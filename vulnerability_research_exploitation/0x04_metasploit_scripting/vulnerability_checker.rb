#!/usr/bin/env ruby

require 'msf/core'

class MetasploitModule < Msf::Auxiliary
  include Msf::Auxiliary::Scanner

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Custom TCP Port Scanner',
      'Description'    => %q{
        This module checks a bunch of ports on one or more targets
        to see which ones are open.
      },
      'Author'         => ['Ahmed Belhaj', 'Xavier'],
      'License'        => MSF_LICENSE
    ))

    register_options(
      [
        Opt::RHOSTS(),  # where to scan
        OptPort.new('STARTPORT', [true, 'First port to check', 1]),  # port to start from
        OptPort.new('ENDPORT',   [true, 'Last port to check', 1024]), # port to end at
        OptInt.new('THREADS',    [true, 'How many scans to do at once', 10]) # how fast we go
      ]
    )
  end

  def run_host(ip)
    start_port = datastore['STARTPORT'].to_i   # get the first port to scan
    end_port   = datastore['ENDPORT'].to_i     # get the last port to scan
    open_ports = []                            # where we’ll keep any open ports we find

    (start_port..end_port).each do |port|      # go through each port number
      begin
        connect(false, { 'RHOST' => ip, 'RPORT' => port })  # try connecting
        print_good("#{ip}:#{port} - Port #{port} is open on #{ip}")  # tell the user if it's open
        open_ports << port                      # save it to the list
        disconnect                              # stop the connection
      rescue ::Rex::ConnectionError, ::Timeout::Error
        # if we can’t connect, just skip it and move on
      end
    end

    if open_ports.any?
      print_status("#{ip} - Open ports on #{ip}: #{open_ports.join(', ')}") # show found ones
    else
      print_status("#{ip} - No open ports found on #{ip}") # let them know if nothing was open
    end
  end
end
