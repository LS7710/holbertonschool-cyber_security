require 'msf/core'

class MetasploitModule < Msf::Auxiliary
  include Msf::Exploit::Remote::Tcp
  include Msf::Auxiliary::Scanner

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Custom Port Scanner',
      'Description' => %q{
        This module scans a range of TCP ports on a target system and reports which ones are open.
      },
      'Author'      => ['Your Name'],
      'License'     => MSF_LICENSE
    ))

    register_options(
      [
        Opt::RHOST(),
        OptInt.new('STARTPORT', [true, 'Start of port range to scan', 1]),
        OptInt.new('ENDPORT', [true, 'End of port range to scan', 1024])
      ]
    )
  end

  def run_host(ip)
    start_port = datastore['STARTPORT']
    end_port   = datastore['ENDPORT']
    open_ports = []

    print_status("Scanning #{ip} from port #{start_port} to #{end_port}...")

    (start_port..end_port).each do |port|
      begin
        ::Timeout.timeout(1) do
          connect(false, { 'RPORT' => port })
          open_ports << port
          print_good("Port #{port} is open on #{ip}")
        end
      rescue
        # Port is closed or filtered, silently ignore
      ensure
        disconnect
      end
    end

    if open_ports.any?
      print_status("Open ports on #{ip}: #{open_ports.join(', ')}")
    else
      print_status("No open ports found on #{ip} in the specified range.")
    end
  end
end
